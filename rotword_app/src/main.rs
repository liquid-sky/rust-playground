/// -------------------------------
/// 1) S-box and RCON Tables
/// -------------------------------
static SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

// RCON lookup table, indexing into this array with `i` yields the first byte of rcon(i).
static RCON: [u8; 256] = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
];

/// The inverse S-box for AES. Each index `x` gives the byte `INV_SBOX[x]`.
/// (Below is the full 256-byte table in hex.)
static INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

/// Inverse SubBytes in-place.
fn inv_sub_bytes(state: &mut [[u8; 4]; 4]) {
    for row in 0..4 {
        for col in 0..4 {
            state[row][col] = INV_SBOX[state[row][col] as usize];
        }
    }
}

/// Inverse ShiftRows in-place (row-major).
/// Row 0: no shift, Row 1: shift right by 1, Row 2: shift right by 2, Row 3: shift right by 3.
fn inv_shift_rows(state: &mut [[u8; 4]; 4]) {
    for row in 1..4 {
        let mut new_row = [0u8; 4];
        for col in 0..4 {
            // shift right by `row` => shift left by (4 - row)
            new_row[col] = state[row][(col + 4 - row) % 4];
        }
        state[row] = new_row;
    }
}

/// Inverse MixColumns in-place (row-major).
/// Uses the polynomial coefficients [0x0e, 0x0b, 0x0d, 0x09].
fn inv_mix_columns(state: &mut [[u8; 4]; 4]) {
    for col in 0..4 {
        let a0 = state[0][col];
        let a1 = state[1][col];
        let a2 = state[2][col];
        let a3 = state[3][col];

        state[0][col] = gmul(a0, 0x0e) ^ gmul(a1, 0x0b) ^ gmul(a2, 0x0d) ^ gmul(a3, 0x09);
        state[1][col] = gmul(a0, 0x09) ^ gmul(a1, 0x0e) ^ gmul(a2, 0x0b) ^ gmul(a3, 0x0d);
        state[2][col] = gmul(a0, 0x0d) ^ gmul(a1, 0x09) ^ gmul(a2, 0x0e) ^ gmul(a3, 0x0b);
        state[3][col] = gmul(a0, 0x0b) ^ gmul(a1, 0x0d) ^ gmul(a2, 0x09) ^ gmul(a3, 0x0e);
    }
}

/// Decrypts a single 16-byte block in-place using AES-128 (row-major).
/// `expanded_key` is the same 176-byte key schedule used for encryption.
fn aes128_decrypt_block(state: &mut [[u8; 4]; 4], expanded_key: &[u8; 176]) {
    // Round 10
    let round_key_10 = get_round_key(expanded_key, 10);
    add_round_key(state, &round_key_10);
    inv_shift_rows(state);
    inv_sub_bytes(state);

    // Rounds 9..1
    for round in (1..10).rev() {
        let rk = get_round_key(expanded_key, round);
        add_round_key(state, &rk);
        inv_mix_columns(state);
        inv_shift_rows(state);
        inv_sub_bytes(state);
    }

    // Round 0
    let round_key_0 = get_round_key(expanded_key, 0);
    add_round_key(state, &round_key_0);
}

/// -------------------------------
/// 2) Helper Functions
/// -------------------------------
fn rot_word(word: [u8; 4]) -> [u8; 4] {
    [word[1], word[2], word[3], word[0]]
}

fn sub_word(word: [u8; 4]) -> [u8; 4] {
    [
        SBOX[word[0] as usize],
        SBOX[word[1] as usize],
        SBOX[word[2] as usize],
        SBOX[word[3] as usize],
    ]
}

fn rcon(i: u8) -> [u8; 4] {
    [RCON[i as usize], 0x00, 0x00, 0x00]
}

/// Galois multiplication in GF(2^8).
fn gmul(mut a: u8, mut b: u8) -> u8 {
    let mut p = 0u8;
    for _ in 0..8 {
        if (b & 1) != 0 {
            p ^= a;
        }
        let hi_bit_set = (a & 0x80) != 0;
        a <<= 1;
        if hi_bit_set {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    p
}

/// -------------------------------
/// 3) AES Transformations
/// -------------------------------

/// SubBytes in-place on a row-major 4×4 state.
fn sub_bytes(state: &mut [[u8; 4]; 4]) {
    for row in 0..4 {
        for col in 0..4 {
            state[row][col] = SBOX[state[row][col] as usize];
        }
    }
}

/// ShiftRows in-place for a row-major 4×4 state.
fn shift_rows(state: &mut [[u8; 4]; 4]) {
    for row in 1..4 {
        let mut new_row = [0u8; 4];
        for col in 0..4 {
            new_row[col] = state[row][(col + row) % 4];
        }
        state[row] = new_row;
    }
}

/// MixColumns in-place for a row-major 4×4 state.
fn mix_columns(state: &mut [[u8; 4]; 4]) {
    for col in 0..4 {
        let a0 = state[0][col];
        let a1 = state[1][col];
        let a2 = state[2][col];
        let a3 = state[3][col];

        state[0][col] = gmul(a0, 2) ^ gmul(a1, 3) ^ gmul(a2, 1) ^ gmul(a3, 1);
        state[1][col] = gmul(a0, 1) ^ gmul(a1, 2) ^ gmul(a2, 3) ^ gmul(a3, 1);
        state[2][col] = gmul(a0, 1) ^ gmul(a1, 1) ^ gmul(a2, 2) ^ gmul(a3, 3);
        state[3][col] = gmul(a0, 3) ^ gmul(a1, 1) ^ gmul(a2, 1) ^ gmul(a3, 2);
    }
}

/// AddRoundKey in-place, XORing a 16-byte round key into a row-major 4×4 state.
fn add_round_key(state: &mut [[u8; 4]; 4], round_key: &[u8; 16]) {
    for row in 0..4 {
        for col in 0..4 {
            let index = row * 4 + col;
            state[row][col] ^= round_key[index];
        }
    }
}

/// -------------------------------
/// 4) Key Expansion for AES-128
/// -------------------------------
fn key_expansion_128(key: [u8; 16]) -> [u8; 176] {
    // Nk=4, Nr=10 for AES-128
    let mut expanded_key = [0u8; 176];
    expanded_key[..16].copy_from_slice(&key);

    let mut bytes_written = 16;
    let mut i = 4;

    while i < 44 {
        let mut temp = [
            expanded_key[bytes_written - 4],
            expanded_key[bytes_written - 3],
            expanded_key[bytes_written - 2],
            expanded_key[bytes_written - 1],
        ];

        if i % 4 == 0 {
            temp = rot_word(temp);
            temp = sub_word(temp);
            let rcon_word = rcon((i / 4) as u8);
            for j in 0..4 {
                temp[j] ^= rcon_word[j];
            }
        }

        let offset = bytes_written - 16;
        for j in 0..4 {
            expanded_key[bytes_written] = expanded_key[offset + j] ^ temp[j];
            bytes_written += 1;
        }
        i += 1;
    }

    expanded_key
}

/// Extract the 16-byte round key for round `round` from the expanded key.
fn get_round_key(expanded_key: &[u8; 176], round: usize) -> [u8; 16] {
    let start = round * 16;
    let end = start + 16;
    let mut rk = [0u8; 16];
    rk.copy_from_slice(&expanded_key[start..end]);
    rk
}

/// -------------------------------
/// 5) AES-128 Encryption of a Single 16-byte Block
/// -------------------------------

/// Convert a 16-byte block into a row-major 4×4 matrix.
fn bytes_to_row_major_matrix(block: [u8; 16]) -> [[u8; 4]; 4] {
    let mut state = [[0u8; 4]; 4];
    for (i, &byte) in block.iter().enumerate() {
        let row = i / 4;
        let col = i % 4;
        state[row][col] = byte;
    }
    state
}

/// Convert a row-major 4×4 matrix back to a 16-byte block.
fn row_major_matrix_to_bytes(state: [[u8; 4]; 4]) -> [u8; 16] {
    let mut block = [0u8; 16];
    for row in 0..4 {
        for col in 0..4 {
            block[row * 4 + col] = state[row][col];
        }
    }
    block
}

/// Encrypt a single 16-byte block in-place using AES-128 (row-major).
/// `expanded_key` must be 176 bytes from `key_expansion_128`.
fn aes128_encrypt_block(state: &mut [[u8; 4]; 4], expanded_key: &[u8; 176]) {
    // Initial AddRoundKey
    let round_key_0 = get_round_key(expanded_key, 0);
    add_round_key(state, &round_key_0);

    // 9 Main Rounds
    for round in 1..10 {
        sub_bytes(state);
        shift_rows(state);
        mix_columns(state);
        let rk = get_round_key(expanded_key, round);
        add_round_key(state, &rk);
    }

    // Final Round (no MixColumns)
    sub_bytes(state);
    shift_rows(state);
    let rk_final = get_round_key(expanded_key, 10);
    add_round_key(state, &rk_final);
}

/// -------------------------------
/// 6) Demonstration in main
/// -------------------------------
fn main() {
    // Example plaintext block: 0x3243f6a8 885a308d 313198a2 e0370734
    let plaintext: [u8; 16] = [
        0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07,
        0x34,
    ];

    // Example 128-bit key: 0x2b7e1516 28aed2a6 abf71588 09cf4f3c
    let key: [u8; 16] = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f,
        0x3c,
    ];

    // Expand the key to 176 bytes
    let expanded_key = key_expansion_128(key);

    // Convert plaintext to row-major 4×4 state
    let mut state = bytes_to_row_major_matrix(plaintext);

    // Encrypt
    aes128_encrypt_block(&mut state, &expanded_key);

    // Convert state back to a 16-byte block (ciphertext)
    let ciphertext = row_major_matrix_to_bytes(state);

    println!("Plaintext:  {:02x?}", plaintext);
    println!("Key:        {:02x?}", key);
    println!("Ciphertext: {:02x?}", ciphertext);

    // 3) Decrypt the ciphertext
    let mut decrypt_state = bytes_to_row_major_matrix(ciphertext);
    aes128_decrypt_block(&mut decrypt_state, &expanded_key);
    let recovered_plaintext = row_major_matrix_to_bytes(decrypt_state);
    println!("Recovered plaintext: {:02x?}", recovered_plaintext);

    // Check that recovered plaintext = original
    assert_eq!(recovered_plaintext, plaintext);
    println!("Decryption successful, plaintext matches!");

}
